@page "/"
@using Blazored.SessionStorage
@using CricHeroesAnalytics.Services.Interfaces
@using TheMarauderMap.Components.Layout
@using TheMarauderMap.Constants
@using TheMarauderMap.Repositories
@using TheMarauderMap.Services.Interfaces
@rendermode InteractiveServer
@inherits LayoutComponentBase;
@layout MainLayout;

@inject ISecretService secretService;
@inject IUserLoginService userLoginService;
@inject IJSRuntime jsRuntime;
@inject ISessionRepository sessionRepository;
@inject ISessionStorageService sessionStorage;

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<!-- Add a button to launch the Upstox login URL -->
<button @onclick="LaunchUpstoxLogin">Login with Upstox</button>

@code {
    async void LaunchUpstoxLogin()
    {
        if (await sessionStorage.ContainKeyAsync(GlobalConstants.SessionIdKey))
        {
            string existingSessionId = await sessionStorage.GetItemAsync<string>(GlobalConstants.SessionIdKey);
            if (await this.userLoginService.IsLoggedIn(existingSessionId))
            {
                return;
            }
        }
        var clientId = secretService.GetSecretValue("UptstoxApiKey");
        string redirectUri = secretService.GetSecretValue("redirect_uri");
        string userSessionId = await sessionRepository.CreateNewSession();
        await sessionStorage.SetItemAsync<string>(GlobalConstants.SessionIdKey, userSessionId);
        var upstoxLoginUrl = $"https://api.upstox.com/v2/login/authorization/dialog?response_type=code&client_id={clientId}&redirect_uri={redirectUri}&state={userSessionId}";
        await jsRuntime.InvokeVoidAsync("open", upstoxLoginUrl, "_blank");
    }
}
